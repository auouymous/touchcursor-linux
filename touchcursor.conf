# touchcursor-linux configuration file
# For usable key names, run: touchcursor list-keys
# You do not have to specify the 'KEY_' part of the key names.
# Some keys can be specified by a single character (-\[];',./).

# Uncomment to prevent modifications to this file from reloading the service.
# Sending a HUP signal to the service will manually reload the configuration file.
# The service must be restarted for this setting to take effect.
# To verify a configuration is good before reloading, run: touchcursor check-conf
#[DisableAutomaticReload]

# Find this line using the following command
# grep -E 'Name=|Handlers=|EV=' /proc/bus/input/devices | grep -B2 EV='1200' --no-group-separator | grep 'Name=' | cut -c 4-
# If there are multiple devices with the same name, you may add :# to the line (ex: Name="Your Keyboard":2).
# The service must be sent a HUP signal to enable a configured device after connecting it.
[Device]
Name="Your Keyboard"
#Name="Your Other Keyboard"

# The following specifies bindings that are always applied. These bindings will be applied without the hyper key pressed.
#
# In the following example, 't' will always output 'm'.
#
# [Remap]
# KEY_T=KEY_M
#
# In the following example, 't' will always output 'm', unless the hyper key is held, where it will output 'd'.
#
# [Remap]
# KEY_T=KEY_M
#
# [Bindings]
# KEY_T=KEY_D
#
# It is also possible to swap keys.
#
# [Remap]
# KEY_T=KEY_M
# KEY_M=KEY_T
[Remap]

# The following specifies the hyper key. This key will activate the bindings below.
[Hyper]
HYPER1=KEY_SPACE

# The following specifies bindings when holding the hyper key (default Space).
#
# In the following example, when holding the hyper key, 't' would output 'm'.
# Example: KEY_T=KEY_M
#
# You may provide a sequence of output keys for a binding (maximum of 4).
# Example: KEY_I=KEY_H,KEY_J,KEY_K,KEY_L
[Bindings]
# Default bindings for IJKLHNUOMPY.
KEY_I=KEY_UP
KEY_J=KEY_LEFT
KEY_K=KEY_DOWN
KEY_L=KEY_RIGHT
KEY_H=KEY_PAGEUP
KEY_N=KEY_PAGEDOWN
KEY_U=KEY_HOME
KEY_O=KEY_END
KEY_M=KEY_DELETE
KEY_P=KEY_BACKSPACE
KEY_Y=KEY_INSERT
# Default bindings from SpaceFN: https://geekhack.org/index.php?topic=51069
KEY_E=KEY_ESC
KEY_B=KEY_SPACE
KEY_1=KEY_F1
KEY_2=KEY_F2
KEY_3=KEY_F3
KEY_4=KEY_F4
KEY_5=KEY_F5
KEY_6=KEY_F6
KEY_7=KEY_F7
KEY_8=KEY_F8
KEY_9=KEY_F9
KEY_0=KEY_F10
KEY_MINUS=KEY_F11
KEY_EQUAL=KEY_F12
KEY_SLASH=KEY_MENU
#KEY_RIGHTBRACE=KEY_PAUSE
#KEY_BACKSLASH=KEY_INSERT
#KEY_BACKSPACE=KEY_DELETE
# Moved over one key
KEY_COMMA=KEY_GRAVE
# This is not currently possible
#KEY_DOT=KEY_TILDE

# The Device, Hyper and Bindings sections above simply add devices and a single hyper layer shared by all.
#
# You can also create a custom layer for each device and add additional layers for multiple hyper keys.
# Valid layer names may only contain lowercase a-z, 0-9, underscore "_" and hyphen "-".
# Layer names must be unique, however, nested layers are automatically prefixed with their parent layer's name.
# Indenting with spaces or tabs is required for custom layers, and each level must be the next multiple of the previous level.
#
# The [Hyper] key and bindings in the [Bindings] layer are automatically remapped usng the [Remap] section,
# for compatibility with old configurations.
# The keys emitted from a binding are never remapped.
# If CAPSLOCK is remapped to ESC, then a CAPSLOCK=X binding is assumed to be ESC=X.
# And Hyper1=CAPSLOCK is assumed to be Hyper1=ESC
# Custom layers do not perform this remapping and require the key you would expect to be remapped to it.
# This makes it easier to create bindings if you've physically moved key caps and used [Remap] to set them.
#
#[custom]
#  APOSTROPHE=GRAVE
#
#  # Layers may contain nested layers.
#  # Nested layers are not activated along with their parent layer.
#  # They must be activated separately, and unbound keys will fall-through to parent layer, up to the device layer.
#  [nested]
#    A=B
#
#[device1]
#  # The device command registers an input device and marks the layer as the base mapping for the device.
#  # This should be specified before any bindings as it overwrites the layer with a default 1-to-1 mapping.
#  (device "Your Keyboard")
#
#  # Devices registered with [Device] automatically inherit the root [Remap] section.
#  # Custom layer devices must use the inherit-remap command.
#  (inherit-remap)
#
#  # Each device may have its own remapped keys, instead of using the shared root [Remap] section.
#  [Remap]
#    CAPSLOCK=ESC
#
#  # Bindings in a device layer are always active.
#  # As with the [Bindings] section, the right value may be 1 to 7 keys.
#  # It may also be a parenthesized action.
#  #  The disabled action causes the key to do nothing when pressed or released.
#  #    KEY=(disabled)
#  #  The overload action is similar to the default hyper key.
#  #    KEY=(overload layer [tap=key])
#  #    First argument is a layer path to activate while held down.
#  #    Second argument is an optional key to emit when tapped, and defaults to the binding key.
#  #  The shift action activates a layer while its key is held down.
#  #    KEY=(shift layer)
#  #    First argument is a layer path to activate.
#  #  The latch action activates a layer while its key is held down or for a single key after tapped.
#  #    KEY=(latch layer)
#  #    First argument is a layer path to activate.
#
#  # Devices registered with [Device] automatically get an overload action on the hyper key.
#  # Adding devices with custom layers requires manually adding a hyper key.
#
#  # Bind SPACE to the [Bindings] layer when held, and emit SPACE when tapped.
#  SPACE=(overload Bindings)
#  # Bind ESC to the [custom] layer when held, and emit ESC when tapped.
#  ESC=(overload custom ESC)
#
#  # Device layers may also contain nested layers.
#  [nested]
#    A=B
#  # Add a binding using the [nested] layer in the current layer.
#  SPACE=(overload .nested)
#  # Add a binding using the [nested] layer in the [custom] layer.
#  SPACE=(overload custom.nested)
#
#[device2]
#  # Each device is added with its own layer.
#  (device "Your Other Keyboard":1)
#
#  # And requires its own hyper key.
#  SPACE=(overload Bindings)
