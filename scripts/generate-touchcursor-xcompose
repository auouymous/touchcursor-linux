#!/usr/bin/env python3

import os
import re
import sys

def show_help_and_exit(error):
    if error is not None:
        print('ERROR:', error)

    print('Usage: %s <command>' % os.path.basename(sys.argv[0]))
    print('')
    print('  • --init [<file>]')
    print('    Initialize XCompose files, this must be run before the compose input method can be used.')
    print('    Default file is "$HOME/.XCompose-touchcursor", and should not be set to "$HOME/.XCompose".')
    print('')
    print('  • --link <file> [-u <user>]')
    print('    Symlink "$HOME/.XCompose" to a system-wide XCompose file.')
    print('    The optional user allows root user to create symlinks for users.')
    print('')
    print('  • --regen [<file>]')
    print('    Regenerate XCompose file after modifying "<file>.cfg".')
    print('    Default file is "$HOME/.XCompose-touchcursor", and should not be set to "$HOME/.XCompose".')
    sys.exit(0 if error is None else 1)

def show_error_and_exit(error):
    print('ERROR:', error)
    sys.exit(1)

xcompose_file = os.environ['HOME'] + '/.XCompose'
init_config_file = False

if len(sys.argv) <= 1:
    show_help_and_exit(None)
elif sys.argv[1] == '--init':
    if len(sys.argv) > 3:
        show_help_and_exit('Too many arguments')
    if len(sys.argv) > 2:
        xcompose_file = sys.argv[2]
    init_config_file = True
elif sys.argv[1] == '--link':
    if len(sys.argv) > 5:
        show_help_and_exit('Too many arguments')
    if len(sys.argv) < 3:
        show_help_and_exit('Missing XCompose filename')
    xcompose_file = sys.argv[2]
    if len(sys.argv) > 3:
        if sys.argv[3] != '-u':
            show_help_and_exit('Expected -u followed by a username')
        if len(sys.argv) < 5:
            show_help_and_exit('Missing username')
        user_home = '/home/' + sys.argv[4]
    else:
        user_home = os.environ['HOME']

    # Check user home directory
    if not os.path.exists(user_home):
        show_error_and_exit('User directory "%s" does not exist' % user_home)
    if not os.path.isdir(user_home):
        show_error_and_exit('User directory "%s" is not a directory' % user_home)
    if not os.access(user_home, os.R_OK):
        show_error_and_exit('XCompose file "%s" is not accessible, are you not root?' % user_home)

    # Check XCompose file
    if not os.path.exists(xcompose_file):
        show_error_and_exit('XCompose file "%s" does not exist' % xcompose_file)
    if not os.path.isfile(xcompose_file):
        show_error_and_exit('XCompose file "%s" is not a file' % xcompose_file)
    if not os.access(xcompose_file, os.R_OK):
        show_error_and_exit('XCompose file "%s" is not accessible' % xcompose_file)

    link_file = user_home + '/.XCompose'

    if os.path.exists(link_file):
        show_error_and_exit('"%s" exists, remove it and try again' % link_file)

    try:
        os.symlink(xcompose_file, link_file)
    except Exception as e:
        show_error_and_exit('Unable to link "%s" to "%s": %s' % (link_file, xcompose_file, str(e)))
    print('Linked "%s" to "%s"' % (link_file, xcompose_file))
    sys.exit(0)
elif sys.argv[1] == '--regen':
    if len(sys.argv) > 3:
        show_help_and_exit('Too many arguments')
    if len(sys.argv) > 2:
        xcompose_file = sys.argv[2]
else:
    show_help_and_exit('Invalid command')

tc_xcompose_file = xcompose_file + '-touchcursor'
config_file = tc_xcompose_file + '.cfg'

blocks = [
    # Basic Multilingual Plane
    [  True,  0, "BMP", 0x000020, 0x00007F, "Basic Latin" ],
    [  True,  0, "BMP", 0x000080, 0x0000FF, "Latin-1 Supplement" ],
    [  True,  0, "BMP", 0x000100, 0x00017F, "Latin Extended-A" ],
    [ False,  0, "BMP", 0x000180, 0x00024F, "Latin Extended-B" ],
    [ False,  0, "BMP", 0x000250, 0x0002AF, "IPA Extensions" ],
    [ False,  0, "BMP", 0x0002B0, 0x0002FF, "Spacing Modifier Letters" ],
    [  True,  0, "BMP", 0x000300, 0x00036F, "Combining Diacritical Marks" ],
    [ False,  0, "BMP", 0x000370, 0x0003FF, "Greek and Coptic" ],
    [ False,  0, "BMP", 0x000400, 0x0004FF, "Cyrillic" ],
    [ False,  0, "BMP", 0x000500, 0x00052F, "Cyrillic Supplement" ],
    [ False,  0, "BMP", 0x000530, 0x00058F, "Armenian" ],
    [ False,  0, "BMP", 0x000590, 0x0005FF, "Hebrew" ],
    [ False,  0, "BMP", 0x000600, 0x0006FF, "Arabic" ],
    [ False,  0, "BMP", 0x000700, 0x00074F, "Syriac" ],
    [ False,  0, "BMP", 0x000750, 0x00077F, "Arabic Supplement" ],
    [ False,  0, "BMP", 0x000780, 0x0007BF, "Thaana" ],
    [ False,  0, "BMP", 0x0007C0, 0x0007FF, "NKo" ],
    [ False,  0, "BMP", 0x000800, 0x00083F, "Samaritan" ],
    [ False,  0, "BMP", 0x000840, 0x00085F, "Mandaic" ],
    [ False,  0, "BMP", 0x000860, 0x00086F, "Syriac Supplement" ],
    [ False,  0, "BMP", 0x000870, 0x00089F, "Arabic Extended-B" ],
    [ False,  0, "BMP", 0x0008A0, 0x0008FF, "Arabic Extended-A" ],
    [ False,  0, "BMP", 0x000900, 0x00097F, "Devanagari" ],
    [ False,  0, "BMP", 0x000980, 0x0009FF, "Bengali" ],
    [ False,  0, "BMP", 0x000A00, 0x000A7F, "Gurmukhi" ],
    [ False,  0, "BMP", 0x000A80, 0x000AFF, "Gujarati" ],
    [ False,  0, "BMP", 0x000B00, 0x000B7F, "Oriya" ],
    [ False,  0, "BMP", 0x000B80, 0x000BFF, "Tamil" ],
    [ False,  0, "BMP", 0x000C00, 0x000C7F, "Telugu" ],
    [ False,  0, "BMP", 0x000C80, 0x000CFF, "Kannada" ],
    [ False,  0, "BMP", 0x000D00, 0x000D7F, "Malayalam" ],
    [ False,  0, "BMP", 0x000D80, 0x000DFF, "Sinhala" ],
    [ False,  0, "BMP", 0x000E00, 0x000E7F, "Thai" ],
    [ False,  0, "BMP", 0x000E80, 0x000EFF, "Lao" ],
    [ False,  0, "BMP", 0x000F00, 0x000FFF, "Tibetan" ],
    [ False,  0, "BMP", 0x001000, 0x00109F, "Myanmar" ],
    [ False,  0, "BMP", 0x0010A0, 0x0010FF, "Georgian" ],
    [ False,  0, "BMP", 0x001100, 0x0011FF, "Hangul Jamo" ],
    [ False,  0, "BMP", 0x001200, 0x00137F, "Ethiopic" ],
    [ False,  0, "BMP", 0x001380, 0x00139F, "Ethiopic Supplement" ],
    [ False,  0, "BMP", 0x0013A0, 0x0013FF, "Cherokee" ],
    [ False,  0, "BMP", 0x001400, 0x00167F, "Unified Canadian Aboriginal Syllabics" ],
    [ False,  0, "BMP", 0x001680, 0x00169F, "Ogham" ],
    [ False,  0, "BMP", 0x0016A0, 0x0016FF, "Runic" ],
    [ False,  0, "BMP", 0x001700, 0x00171F, "Tagalog" ],
    [ False,  0, "BMP", 0x001720, 0x00173F, "Hanunoo" ],
    [ False,  0, "BMP", 0x001740, 0x00175F, "Buhid" ],
    [ False,  0, "BMP", 0x001760, 0x00177F, "Tagbanwa" ],
    [ False,  0, "BMP", 0x001780, 0x0017FF, "Khmer" ],
    [ False,  0, "BMP", 0x001800, 0x0018AF, "Mongolian" ],
    [ False,  0, "BMP", 0x0018B0, 0x0018FF, "Unified Canadian Aboriginal Syllabics Extended" ],
    [ False,  0, "BMP", 0x001900, 0x00194F, "Limbu" ],
    [ False,  0, "BMP", 0x001950, 0x00197F, "Tai Le" ],
    [ False,  0, "BMP", 0x001980, 0x0019DF, "New Tai Lue" ],
    [ False,  0, "BMP", 0x0019E0, 0x0019FF, "Khmer Symbols" ],
    [ False,  0, "BMP", 0x001A00, 0x001A1F, "Buginese" ],
    [ False,  0, "BMP", 0x001A20, 0x001AAF, "Tai Tham" ],
    [ False,  0, "BMP", 0x001AB0, 0x001AFF, "Combining Diacritical Marks Extended" ],
    [ False,  0, "BMP", 0x001B00, 0x001B7F, "Balinese" ],
    [ False,  0, "BMP", 0x001B80, 0x001BBF, "Sundanese" ],
    [ False,  0, "BMP", 0x001BC0, 0x001BFF, "Batak" ],
    [ False,  0, "BMP", 0x001C00, 0x001C4F, "Lepcha" ],
    [ False,  0, "BMP", 0x001C50, 0x001C7F, "Ol Chiki" ],
    [ False,  0, "BMP", 0x001C80, 0x001C8F, "Cyrillic Extended-C" ],
    [ False,  0, "BMP", 0x001C90, 0x001CBF, "Georgian Extended" ],
    [ False,  0, "BMP", 0x001CC0, 0x001CCF, "Sundanese Supplement" ],
    [ False,  0, "BMP", 0x001CD0, 0x001CFF, "Vedic Extensions" ],
    [ False,  0, "BMP", 0x001D00, 0x001D7F, "Phonetic Extensions" ],
    [ False,  0, "BMP", 0x001D80, 0x001DBF, "Phonetic Extensions Supplement" ],
    [ False,  0, "BMP", 0x001DC0, 0x001DFF, "Combining Diacritical Marks Supplement" ],
    [ False,  0, "BMP", 0x001E00, 0x001EFF, "Latin Extended Additional" ],
    [ False,  0, "BMP", 0x001F00, 0x001FFF, "Greek Extended" ],
    [  True,  0, "BMP", 0x002000, 0x00206F, "General Punctuation" ],
    [  True,  0, "BMP", 0x002070, 0x00209F, "Superscripts and Subscripts" ],
    [  True,  0, "BMP", 0x0020A0, 0x0020CF, "Currency Symbols" ],
    [ False,  0, "BMP", 0x0020D0, 0x0020FF, "Combining Diacritical Marks for Symbols" ],
    [  True,  0, "BMP", 0x002100, 0x00214F, "Letterlike Symbols" ],
    [ False,  0, "BMP", 0x002150, 0x00218F, "Number Forms" ],
    [  True,  0, "BMP", 0x002190, 0x0021FF, "Arrows" ],
    [  True,  0, "BMP", 0x002200, 0x0022FF, "Mathematical Operators" ],
    [  True,  0, "BMP", 0x002300, 0x0023FF, "Miscellaneous Technical" ],
    [ False,  0, "BMP", 0x002400, 0x00243F, "Control Pictures" ],
    [ False,  0, "BMP", 0x002440, 0x00245F, "Optical Character Recognition" ],
    [ False,  0, "BMP", 0x002460, 0x0024FF, "Enclosed Alphanumerics" ],
    [  True,  0, "BMP", 0x002500, 0x00257F, "Box Drawing" ],
    [  True,  0, "BMP", 0x002580, 0x00259F, "Block Elements" ],
    [  True,  0, "BMP", 0x0025A0, 0x0025FF, "Geometric Shapes" ],
    [  True,  0, "BMP", 0x002600, 0x0026FF, "Miscellaneous Symbols" ],
    [  True,  0, "BMP", 0x002700, 0x0027BF, "Dingbats" ],
    [ False,  0, "BMP", 0x0027C0, 0x0027EF, "Miscellaneous Mathematical Symbols-A" ],
    [  True,  0, "BMP", 0x0027F0, 0x0027FF, "Supplemental Arrows-A" ],
    [ False,  0, "BMP", 0x002800, 0x0028FF, "Braille Patterns" ],
    [ False,  0, "BMP", 0x002900, 0x00297F, "Supplemental Arrows-B" ],
    [ False,  0, "BMP", 0x002980, 0x0029FF, "Miscellaneous Mathematical Symbols-B" ],
    [ False,  0, "BMP", 0x002A00, 0x002AFF, "Supplemental Mathematical Operators" ],
    [  True,  0, "BMP", 0x002B00, 0x002BFF, "Miscellaneous Symbols and Arrows" ],
    [ False,  0, "BMP", 0x002C00, 0x002C5F, "Glagolitic" ],
    [ False,  0, "BMP", 0x002C60, 0x002C7F, "Latin Extended-C" ],
    [ False,  0, "BMP", 0x002C80, 0x002CFF, "Coptic" ],
    [ False,  0, "BMP", 0x002D00, 0x002D2F, "Georgian Supplement" ],
    [ False,  0, "BMP", 0x002D30, 0x002D7F, "Tifinagh" ],
    [ False,  0, "BMP", 0x002D80, 0x002DDF, "Ethiopic Extended" ],
    [ False,  0, "BMP", 0x002DE0, 0x002DFF, "Cyrillic Extended-A" ],
    [ False,  0, "BMP", 0x002E00, 0x002E7F, "Supplemental Punctuation" ],
    [ False,  0, "BMP", 0x002E80, 0x002EFF, "CJK Radicals Supplement" ],
    [ False,  0, "BMP", 0x002F00, 0x002FDF, "Kangxi Radicals" ],
    [ False,  0, "BMP", 0x002FF0, 0x002FFF, "Ideographic Description Characters" ],
    [  True,  0, "BMP", 0x003000, 0x00303F, "CJK Symbols and Punctuation" ],
    [ False,  0, "BMP", 0x003040, 0x00309F, "Hiragana" ],
    [ False,  0, "BMP", 0x0030A0, 0x0030FF, "Katakana" ],
    [ False,  0, "BMP", 0x003100, 0x00312F, "Bopomofo" ],
    [ False,  0, "BMP", 0x003130, 0x00318F, "Hangul Compatibility Jamo" ],
    [ False,  0, "BMP", 0x003190, 0x00319F, "Kanbun" ],
    [ False,  0, "BMP", 0x0031A0, 0x0031BF, "Bopomofo Extended" ],
    [ False,  0, "BMP", 0x0031C0, 0x0031EF, "CJK Strokes" ],
    [ False,  0, "BMP", 0x0031F0, 0x0031FF, "Katakana Phonetic Extensions" ],
    [ False,  0, "BMP", 0x003200, 0x0032FF, "Enclosed CJK Letters and Months" ],
    [ False,  0, "BMP", 0x003300, 0x0033FF, "CJK Compatibility" ],
    [ False,  0, "BMP", 0x003400, 0x004DBF, "CJK Unified Ideographs Extension A" ],
    [ False,  0, "BMP", 0x004DC0, 0x004DFF, "Yijing Hexagram Symbols" ],
    [ False,  0, "BMP", 0x004E00, 0x009FFF, "CJK Unified Ideographs" ],
    [ False,  0, "BMP", 0x00A000, 0x00A48F, "Yi Syllables" ],
    [ False,  0, "BMP", 0x00A490, 0x00A4CF, "Yi Radicals" ],
    [ False,  0, "BMP", 0x00A4D0, 0x00A4FF, "Lisu" ],
    [ False,  0, "BMP", 0x00A500, 0x00A63F, "Vai" ],
    [ False,  0, "BMP", 0x00A640, 0x00A69F, "Cyrillic Extended-B" ],
    [ False,  0, "BMP", 0x00A6A0, 0x00A6FF, "Bamum" ],
    [ False,  0, "BMP", 0x00A700, 0x00A71F, "Modifier Tone Letters" ],
    [ False,  0, "BMP", 0x00A720, 0x00A7FF, "Latin Extended-D" ],
    [ False,  0, "BMP", 0x00A800, 0x00A82F, "Syloti Nagri" ],
    [ False,  0, "BMP", 0x00A830, 0x00A83F, "Common Indic Number Forms" ],
    [ False,  0, "BMP", 0x00A840, 0x00A87F, "Phags-pa" ],
    [ False,  0, "BMP", 0x00A880, 0x00A8DF, "Saurashtra" ],
    [ False,  0, "BMP", 0x00A8E0, 0x00A8FF, "Devanagari Extended" ],
    [ False,  0, "BMP", 0x00A900, 0x00A92F, "Kayah Li" ],
    [ False,  0, "BMP", 0x00A930, 0x00A95F, "Rejang" ],
    [ False,  0, "BMP", 0x00A960, 0x00A97F, "Hangul Jamo Extended-A" ],
    [ False,  0, "BMP", 0x00A980, 0x00A9DF, "Javanese" ],
    [ False,  0, "BMP", 0x00A9E0, 0x00A9FF, "Myanmar Extended-B" ],
    [ False,  0, "BMP", 0x00AA00, 0x00AA5F, "Cham" ],
    [ False,  0, "BMP", 0x00AA60, 0x00AA7F, "Myanmar Extended-A" ],
    [ False,  0, "BMP", 0x00AA80, 0x00AADF, "Tai Viet" ],
    [ False,  0, "BMP", 0x00AAE0, 0x00AAFF, "Meetei Mayek Extensions" ],
    [ False,  0, "BMP", 0x00AB00, 0x00AB2F, "Ethiopic Extended-A" ],
    [ False,  0, "BMP", 0x00AB30, 0x00AB6F, "Latin Extended-E" ],
    [ False,  0, "BMP", 0x00AB70, 0x00ABBF, "Cherokee Supplement" ],
    [ False,  0, "BMP", 0x00ABC0, 0x00ABFF, "Meetei Mayek" ],
    [ False,  0, "BMP", 0x00AC00, 0x00D7AF, "Hangul Syllables" ],
    [ False,  0, "BMP", 0x00D7B0, 0x00D7FF, "Hangul Jamo Extended-B" ],
    [ False,  0, "BMP", 0x00D800, 0x00DB7F, "High Surrogates" ],
    [ False,  0, "BMP", 0x00DB80, 0x00DBFF, "High Private Use Surrogates" ],
    [ False,  0, "BMP", 0x00DC00, 0x00DFFF, "Low Surrogates" ],
    [ False,  0, "BMP", 0x00E000, 0x00F8FF, "Private Use Area" ],
    [ False,  0, "BMP", 0x00F900, 0x00FAFF, "CJK Compatibility Ideographs" ],
    [ False,  0, "BMP", 0x00FB00, 0x00FB4F, "Alphabetic Presentation Forms" ],
    [ False,  0, "BMP", 0x00FB50, 0x00FDFF, "Arabic Presentation Forms-A" ],
    [ False,  0, "BMP", 0x00FE00, 0x00FE0F, "Variation Selectors" ],
    [ False,  0, "BMP", 0x00FE10, 0x00FE1F, "Vertical Forms" ],
    [ False,  0, "BMP", 0x00FE20, 0x00FE2F, "Combining Half Marks" ],
    [ False,  0, "BMP", 0x00FE30, 0x00FE4F, "CJK Compatibility Forms" ],
    [  True,  0, "BMP", 0x00FE50, 0x00FE6F, "Small Form Variants" ],
    [ False,  0, "BMP", 0x00FE70, 0x00FEFF, "Arabic Presentation Forms-B" ],
    [  True,  0, "BMP", 0x00FF00, 0x00FFEF, "Halfwidth and Fullwidth Forms" ],
    [ False,  0, "BMP", 0x00FFF0, 0x00FFFF, "Specials" ],

    # Supplementary Multilingual Plane
    [ False,  1, "SMP", 0x010000, 0x01007F, "Linear B Syllabary" ],
    [ False,  1, "SMP", 0x010080, 0x0100FF, "Linear B Ideograms" ],
    [ False,  1, "SMP", 0x010100, 0x01013F, "Aegean Numbers" ],
    [ False,  1, "SMP", 0x010140, 0x01018F, "Ancient Greek Numbers" ],
    [ False,  1, "SMP", 0x010190, 0x0101CF, "Ancient Symbols" ],
    [ False,  1, "SMP", 0x0101D0, 0x0101FF, "Phaistos Disc" ],
    [ False,  1, "SMP", 0x010280, 0x01029F, "Lycian" ],
    [ False,  1, "SMP", 0x0102A0, 0x0102DF, "Carian" ],
    [ False,  1, "SMP", 0x0102E0, 0x0102FF, "Coptic Epact Numbers" ],
    [ False,  1, "SMP", 0x010300, 0x01032F, "Old Italic" ],
    [ False,  1, "SMP", 0x010330, 0x01034F, "Gothic" ],
    [ False,  1, "SMP", 0x010350, 0x01037F, "Old Permic" ],
    [ False,  1, "SMP", 0x010380, 0x01039F, "Ugaritic" ],
    [ False,  1, "SMP", 0x0103A0, 0x0103DF, "Old Persian" ],
    [ False,  1, "SMP", 0x010400, 0x01044F, "Deseret" ],
    [ False,  1, "SMP", 0x010450, 0x01047F, "Shavian" ],
    [ False,  1, "SMP", 0x010480, 0x0104AF, "Osmanya" ],
    [ False,  1, "SMP", 0x0104B0, 0x0104FF, "Osage" ],
    [ False,  1, "SMP", 0x010500, 0x01052F, "Elbasan" ],
    [ False,  1, "SMP", 0x010530, 0x01056F, "Caucasian Albanian" ],
    [ False,  1, "SMP", 0x010570, 0x0105BF, "Vithkuqi" ],
    [ False,  1, "SMP", 0x010600, 0x01077F, "Linear A" ],
    [ False,  1, "SMP", 0x010780, 0x0107BF, "Latin Extended-F" ],
    [ False,  1, "SMP", 0x010800, 0x01083F, "Cypriot Syllabary" ],
    [ False,  1, "SMP", 0x010840, 0x01085F, "Imperial Aramaic" ],
    [ False,  1, "SMP", 0x010860, 0x01087F, "Palmyrene" ],
    [ False,  1, "SMP", 0x010880, 0x0108AF, "Nabataean" ],
    [ False,  1, "SMP", 0x0108E0, 0x0108FF, "Hatran" ],
    [ False,  1, "SMP", 0x010900, 0x01091F, "Phoenician" ],
    [ False,  1, "SMP", 0x010920, 0x01093F, "Lydian" ],
    [ False,  1, "SMP", 0x010980, 0x01099F, "Meroitic Hieroglyphs" ],
    [ False,  1, "SMP", 0x0109A0, 0x0109FF, "Meroitic Cursive" ],
    [ False,  1, "SMP", 0x010A00, 0x010A5F, "Kharoshthi" ],
    [ False,  1, "SMP", 0x010A60, 0x010A7F, "Old South Arabian" ],
    [ False,  1, "SMP", 0x010A80, 0x010A9F, "Old North Arabian" ],
    [ False,  1, "SMP", 0x010AC0, 0x010AFF, "Manichaean" ],
    [ False,  1, "SMP", 0x010B00, 0x010B3F, "Avestan" ],
    [ False,  1, "SMP", 0x010B40, 0x010B5F, "Inscriptional Parthian" ],
    [ False,  1, "SMP", 0x010B60, 0x010B7F, "Inscriptional Pahlavi" ],
    [ False,  1, "SMP", 0x010B80, 0x010BAF, "Psalter Pahlavi" ],
    [ False,  1, "SMP", 0x010C00, 0x010C4F, "Old Turkic" ],
    [ False,  1, "SMP", 0x010C80, 0x010CFF, "Old Hungarian" ],
    [ False,  1, "SMP", 0x010D00, 0x010D3F, "Hanifi Rohingya" ],
    [ False,  1, "SMP", 0x010E60, 0x010E7F, "Rumi Numeral Symbols" ],
    [ False,  1, "SMP", 0x010E80, 0x010EBF, "Yezidi" ],
    [ False,  1, "SMP", 0x010EC0, 0x010EFF, "Arabic Extended-C" ],
    [ False,  1, "SMP", 0x010F00, 0x010F2F, "Old Sogdian" ],
    [ False,  1, "SMP", 0x010F30, 0x010F6F, "Sogdian" ],
    [ False,  1, "SMP", 0x010F70, 0x010FAF, "Old Uyghur" ],
    [ False,  1, "SMP", 0x010FB0, 0x010FDF, "Chorasmian" ],
    [ False,  1, "SMP", 0x010FE0, 0x010FFF, "Elymaic" ],
    [ False,  1, "SMP", 0x011000, 0x01107F, "Brahmi" ],
    [ False,  1, "SMP", 0x011080, 0x0110CF, "Kaithi" ],
    [ False,  1, "SMP", 0x0110D0, 0x0110FF, "Sora Sompeng" ],
    [ False,  1, "SMP", 0x011100, 0x01114F, "Chakma" ],
    [ False,  1, "SMP", 0x011150, 0x01117F, "Mahajani" ],
    [ False,  1, "SMP", 0x011180, 0x0111DF, "Sharada" ],
    [ False,  1, "SMP", 0x0111E0, 0x0111FF, "Sinhala Archaic Numbers" ],
    [ False,  1, "SMP", 0x011200, 0x01124F, "Khojki" ],
    [ False,  1, "SMP", 0x011280, 0x0112AF, "Multani" ],
    [ False,  1, "SMP", 0x0112B0, 0x0112FF, "Khudawadi" ],
    [ False,  1, "SMP", 0x011300, 0x01137F, "Grantha" ],
    [ False,  1, "SMP", 0x011400, 0x01147F, "Newa" ],
    [ False,  1, "SMP", 0x011480, 0x0114DF, "Tirhuta" ],
    [ False,  1, "SMP", 0x011580, 0x0115FF, "Siddham" ],
    [ False,  1, "SMP", 0x011600, 0x01165F, "Modi" ],
    [ False,  1, "SMP", 0x011660, 0x01167F, "Mongolian Supplement" ],
    [ False,  1, "SMP", 0x011680, 0x0116CF, "Takri" ],
    [ False,  1, "SMP", 0x011700, 0x01174F, "Ahom" ],
    [ False,  1, "SMP", 0x011800, 0x01184F, "Dogra" ],
    [ False,  1, "SMP", 0x0118A0, 0x0118FF, "Warang Citi" ],
    [ False,  1, "SMP", 0x011900, 0x01195F, "Dives Akuru" ],
    [ False,  1, "SMP", 0x0119A0, 0x0119FF, "Nandinagari" ],
    [ False,  1, "SMP", 0x011A00, 0x011A4F, "Zanabazar Square" ],
    [ False,  1, "SMP", 0x011A50, 0x011AAF, "Soyombo" ],
    [ False,  1, "SMP", 0x011AB0, 0x011ABF, "Unified Canadian Aboriginal Syllabics Extended-A" ],
    [ False,  1, "SMP", 0x011AC0, 0x011AFF, "Pau Cin Hau" ],
    [ False,  1, "SMP", 0x011B00, 0x011B5F, "Devanagari Extended-A" ],
    [ False,  1, "SMP", 0x011C00, 0x011C6F, "Bhaiksuki" ],
    [ False,  1, "SMP", 0x011C70, 0x011CBF, "Marchen" ],
    [ False,  1, "SMP", 0x011D00, 0x011D5F, "Masaram Gondi" ],
    [ False,  1, "SMP", 0x011D60, 0x011DAF, "Gunjala Gondi" ],
    [ False,  1, "SMP", 0x011EE0, 0x011EFF, "Makasar" ],
    [ False,  1, "SMP", 0x011F00, 0x011F5F, "Kawi" ],
    [ False,  1, "SMP", 0x011FB0, 0x011FBF, "Lisu Supplement" ],
    [ False,  1, "SMP", 0x011FC0, 0x011FFF, "Tamil Supplement" ],
    [ False,  1, "SMP", 0x012000, 0x0123FF, "Cuneiform" ],
    [ False,  1, "SMP", 0x012400, 0x01247F, "Cuneiform Numbers and Punctuation" ],
    [ False,  1, "SMP", 0x012480, 0x01254F, "Early Dynastic Cuneiform" ],
    [ False,  1, "SMP", 0x012F90, 0x012FFF, "Cypro-Minoan" ],
    [ False,  1, "SMP", 0x013000, 0x01342F, "Egyptian Hieroglyphs" ],
    [ False,  1, "SMP", 0x013430, 0x01345F, "Egyptian Hieroglyph Format Controls" ],
    [ False,  1, "SMP", 0x014400, 0x01467F, "Anatolian Hieroglyphs" ],
    [ False,  1, "SMP", 0x016800, 0x016A3F, "Bamum Supplement" ],
    [ False,  1, "SMP", 0x016A40, 0x016A6F, "Mro" ],
    [ False,  1, "SMP", 0x016A70, 0x016ACF, "Tangsa" ],
    [ False,  1, "SMP", 0x016AD0, 0x016AFF, "Bassa Vah" ],
    [ False,  1, "SMP", 0x016B00, 0x016B8F, "Pahawh Hmong" ],
    [ False,  1, "SMP", 0x016E40, 0x016E9F, "Medefaidrin" ],
    [ False,  1, "SMP", 0x016F00, 0x016F9F, "Miao" ],
    [ False,  1, "SMP", 0x016FE0, 0x016FFF, "Ideographic Symbols and Punctuation" ],
    [ False,  1, "SMP", 0x017000, 0x0187FF, "Tangut" ],
    [ False,  1, "SMP", 0x018800, 0x018AFF, "Tangut Components" ],
    [ False,  1, "SMP", 0x018B00, 0x018CFF, "Khitan Small Script" ],
    [ False,  1, "SMP", 0x018D00, 0x018D7F, "Tangut Supplement" ],
    [ False,  1, "SMP", 0x01AFF0, 0x01AFFF, "Kana Extended-B" ],
    [ False,  1, "SMP", 0x01B000, 0x01B0FF, "Kana Supplement" ],
    [ False,  1, "SMP", 0x01B100, 0x01B12F, "Kana Extended-A" ],
    [ False,  1, "SMP", 0x01B130, 0x01B16F, "Small Kana Extension" ],
    [ False,  1, "SMP", 0x01B170, 0x01B2FF, "Nushu" ],
    [ False,  1, "SMP", 0x01BC00, 0x01BC9F, "Duployan" ],
    [ False,  1, "SMP", 0x01BCA0, 0x01BCAF, "Shorthand Format Controls" ],
    [ False,  1, "SMP", 0x01CF00, 0x01CFCF, "Znamenny Musical Notation" ],
    [ False,  1, "SMP", 0x01D000, 0x01D0FF, "Byzantine Musical Symbols" ],
    [ False,  1, "SMP", 0x01D100, 0x01D1FF, "Musical Symbols" ],
    [ False,  1, "SMP", 0x01D200, 0x01D24F, "Ancient Greek Musical Notation" ],
    [ False,  1, "SMP", 0x01D2C0, 0x01D2DF, "Kaktovik Numerals" ],
    [ False,  1, "SMP", 0x01D2E0, 0x01D2FF, "Mayan Numerals" ],
    [ False,  1, "SMP", 0x01D300, 0x01D35F, "Tai Xuan Jing Symbols" ],
    [ False,  1, "SMP", 0x01D360, 0x01D37F, "Counting Rod Numerals" ],
    [ False,  1, "SMP", 0x01D400, 0x01D7FF, "Mathematical Alphanumeric Symbols" ],
    [ False,  1, "SMP", 0x01D800, 0x01DAAF, "Sutton SignWriting" ],
    [ False,  1, "SMP", 0x01DF00, 0x01DFFF, "Latin Extended-G" ],
    [ False,  1, "SMP", 0x01E000, 0x01E02F, "Glagolitic Supplement" ],
    [ False,  1, "SMP", 0x01E030, 0x01E08F, "Cyrillic Extended-D" ],
    [ False,  1, "SMP", 0x01E100, 0x01E14F, "Nyiakeng Puachue Hmong" ],
    [ False,  1, "SMP", 0x01E290, 0x01E2BF, "Toto" ],
    [ False,  1, "SMP", 0x01E2C0, 0x01E2FF, "Wancho" ],
    [ False,  1, "SMP", 0x01E4D0, 0x01E4FF, "Nag Mundari" ],
    [ False,  1, "SMP", 0x01E7E0, 0x01E7FF, "Ethiopic Extended-B" ],
    [ False,  1, "SMP", 0x01E800, 0x01E8DF, "Mende Kikakui" ],
    [ False,  1, "SMP", 0x01E900, 0x01E95F, "Adlam" ],
    [ False,  1, "SMP", 0x01EC70, 0x01ECBF, "Indic Siyaq Numbers" ],
    [ False,  1, "SMP", 0x01ED00, 0x01ED4F, "Ottoman Siyaq Numbers" ],
    [ False,  1, "SMP", 0x01EE00, 0x01EEFF, "Arabic Mathematical Alphabetic Symbols" ],
    [ False,  1, "SMP", 0x01F000, 0x01F02F, "Mahjong Tiles" ],
    [ False,  1, "SMP", 0x01F030, 0x01F09F, "Domino Tiles" ],
    [ False,  1, "SMP", 0x01F0A0, 0x01F0FF, "Playing Cards" ],
    [ False,  1, "SMP", 0x01F100, 0x01F1FF, "Enclosed Alphanumeric Supplement" ],
    [ False,  1, "SMP", 0x01F200, 0x01F2FF, "Enclosed Ideographic Supplement" ],
    [ False,  1, "SMP", 0x01F300, 0x01F5FF, "Miscellaneous Symbols and Pictographs" ],
    [ False,  1, "SMP", 0x01F600, 0x01F64F, "Emoticons" ],
    [ False,  1, "SMP", 0x01F650, 0x01F67F, "Ornamental Dingbats" ],
    [ False,  1, "SMP", 0x01F680, 0x01F6FF, "Transport and Map Symbols" ],
    [ False,  1, "SMP", 0x01F700, 0x01F77F, "Alchemical Symbols" ],
    [ False,  1, "SMP", 0x01F780, 0x01F7FF, "Geometric Shapes Extended" ],
    [ False,  1, "SMP", 0x01F800, 0x01F8FF, "Supplemental Arrows-C" ],
    [ False,  1, "SMP", 0x01F900, 0x01F9FF, "Supplemental Symbols and Pictographs" ],
    [ False,  1, "SMP", 0x01FA00, 0x01FA6F, "Chess Symbols" ],
    [ False,  1, "SMP", 0x01FA70, 0x01FAFF, "Symbols and Pictographs Extended-A" ],
    [ False,  1, "SMP", 0x01FB00, 0x01FBFF, "Symbols for Legacy Computing" ],

    # Supplementary Ideographic Plane
    [ False,  2, "SIP", 0x020000, 0x02A6DF, "CJK Unified Ideographs Extension B" ],
    [ False,  2, "SIP", 0x02A700, 0x02B73F, "CJK Unified Ideographs Extension C" ],
    [ False,  2, "SIP", 0x02B740, 0x02B81F, "CJK Unified Ideographs Extension D" ],
    [ False,  2, "SIP", 0x02B820, 0x02CEAF, "CJK Unified Ideographs Extension E" ],
    [ False,  2, "SIP", 0x02CEB0, 0x02EBEF, "CJK Unified Ideographs Extension F" ],
    [ False,  2, "SIP", 0x02EBF0, 0x02EE5F, "CJK Unified Ideographs Extension I" ],
    [ False,  2, "SIP", 0x02F800, 0x02FA1F, "CJK Compatibility Ideographs Supplement" ],

    # Tertiary Ideographic Plane
    [ False,  3, "TIP", 0x030000, 0x03134F, "CJK Unified Ideographs Extension G" ],
    [ False,  3, "TIP", 0x031350, 0x0323AF, "CJK Unified Ideographs Extension H" ],

    # Supplementary Special-purpose Plane
    [ False, 14, "SSP", 0x0E0000, 0x0E007F, "Tags" ],
    [ False, 14, "SSP", 0x0E0100, 0x0E01EF, "Variation Selectors Supplement" ],

    # Supplementary Private Use Area-A
    [ False, 15, "PUA-A", 0x0F0000, 0x0FFFFF, "Supplementary Private Use Area-A" ],

    # Supplementary Private Use Area-B
    [ False, 16, "PUA-B", 0x100000, 0x10FFFF, "Supplementary Private Use Area-B" ],
]

base32_keys = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
    'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
    'u', 'v', # 'w', 'x', 'y', 'z',
]

tc_config_file = '/etc/touchcursor/touchcursor.conf'
compose_key = 'Cancel'

if init_config_file:
    if os.path.exists(config_file):
        show_error_and_exit('Config file "%s" exists, remove it and try again' % config_file)
    config_dir = os.path.dirname(os.path.abspath(config_file))
    if not os.access(config_dir, os.W_OK):
        show_error_and_exit('Config file can not be written to "%s"' % config_dir)

    try:
        f = open(config_file, 'w')
    except Exception as e:
        show_error_and_exit('Unable to write config to "%s": %s' % (config_file, str(e)))
    print('Writing config to "%s"...' % config_file)
    f.write('# Generated by `%s --init`\n' % os.path.basename(sys.argv[0]))
    f.write('# Run `%s --regen %s` after making modifications\n' % (os.path.basename(sys.argv[0]), xcompose_file))
    f.write('\n')
    f.write('# Set this to the path of the touchcursor.conf file\n')
    f.write(f'tc_config_file = {tc_config_file}\n')
    f.write('\n')
    f.write('# Set this to the matching keysym for the unicode-compose-key key in the touchcursor.conf file\n')
    f.write(f'compose_key = {compose_key}\n')
    f.write('\n')
    for block in blocks:
        f.write('[%c] %s: U+%X-%X: %s\n' % ('X' if block[0] else ' ', block[2], block[3], block[4], block[5]))
    f.close()

    print('Edit "%s" and run `%s --regen %s` to generate XCompose files' % (config_file, os.path.basename(sys.argv[0]), xcompose_file))
else:
    print('Reading config "%s"...' % config_file)
    try:
        f = open(config_file, 'r')
        data = f.read()
        f.close()
        for i, line in enumerate(data.split('\n')):
            line = line.strip()
            # skip blank lines and comments
            if line == '' or line[0] == '#':
                continue
            line_no = i + 1

            m = re.match(r'^([a-z][a-z0-9_-]*)[ 	]*=[ 	]*(.*)$', line)
            if m:
                k = m.group(1)
                v = m.group(2).strip()
                if v == '':
                    show_error_and_exit('[%d] Missing value' % line_no)

                if k == 'tc_config_file':
                    tc_config_file = v
                    continue
                if k == 'compose_key':
                    compose_key = v
                    continue

                show_error_and_exit('[%d] Invalid option: %s' % (line_no, k))

            m = re.match(r'^\[([ X])\] ([^:]+): U\+[^:]+: (.+)$', line)
            if m:
                enabled = m.group(1)
                plane = m.group(2).strip()
                name = m.group(3).strip()

                def toggle_block():
                    for block in blocks:
                        if block[2] == plane and block[5] == name:
                            block[0] = (enabled == 'X')
                            return True
                    return False
                if toggle_block():
                    continue

                show_error_and_exit('[%d] Invalid block: %s: %s' % (line_no, plane, name))

            show_error_and_exit('[%d] Invalid syntax: %s' % (line_no, line))
    except Exception as e:
        show_error_and_exit('Unable to read config file "%s": %s' % (config_file, str(e)))

    print('Checking TouchCursor config "%s"...' % tc_config_file)
    try:
        f = open(tc_config_file, 'r')
        data = f.read()
        f.close()
        for i, line in enumerate(data.split('\n')):
            line = line.strip()
            # skip blank lines and comments
            if line == '' or line[0] == '#':
                continue

            line_no = i + 1
            m = re.match(r'[^ 	]+[ 	]*=[ 	]*("([^"]+)"|U\+[0-9a-fA-F]+)', line)
            if m:
                s = m.group(1)
                if s[0] == 'U':
                    s = '"%s"' % chr(int(s[2:], 16))
                def find_codepoint(cp):
                    for block in blocks:
                        if cp >= block[3] and cp <= block[4]:
                            return (block, block[0])
                    return (None, False)
                for c in list(s):
                    cp = ord(c)
                    block, found = find_codepoint(cp)
                    if not found:
                        if block:
                            print('[%d] ERROR: Compose character "%s" U+%X is not available, enable the "%s" block to use it' % (line_no, c, cp, block[5]))
                        else:
                            print('[%d] ERROR: Compose character "%s" U+%X is not available, no block was found' % (line_no, c, cp))
    except Exception as e:
        show_error_and_exit('Unable to read TouchCursor config file "%s": %s' % (config_file, str(e)))

    try:
        f = open(tc_xcompose_file, 'w')
    except Exception as e:
        show_error_and_exit('Unable to write codepoints to "%s": %s' % (tc_xcompose_file, str(e)))
    print('Writing codepoints to "%s"...' % tc_xcompose_file)
    f.write('# Generated by `%s --regen` -- DO NOT EDIT\n\n' % os.path.basename(sys.argv[0]))
    nr_codepoints = 0
    for block in blocks:
        if block[0]:
            f.write('# [%d] %s: U+%X-%X: %s\n' % (block[1], block[2], block[3], block[4], block[5]))
            for codepoint in range(block[3], block[4] + 1):
                keys = [ 0, 0, 0, 0, 0 ]
                cp = codepoint
                for i in range(0, 5):
                    keys[i] = base32_keys[cp & 0x1F]
                    cp >>= 5
                c = chr(codepoint) if codepoint != 0x5C else "\\\\"
                f.write(f'<{compose_key}> <{keys[4]}> <{keys[3]}> <{keys[2]}> <{keys[1]}> <{keys[0]}> : "{c}"\n')
                nr_codepoints += 1
    f.close()
    print('Wrote %d codepoints to "%s"' % (nr_codepoints, tc_xcompose_file))
    print('WARNING: Some programs might have issues with too many codepoints.')

    if os.path.exists(xcompose_file):
        try:
            f = open(xcompose_file, 'r')
            data = f.read()
            f.close()
            def includes_tc_xcompose(data):
                for i, line in enumerate(data.split('\n')):
                    line = line.strip()
                    if line == f'include "{tc_xcompose_file}"':
                        return True
                return False
            if not includes_tc_xcompose(data):
                print('')
                print('Adding include to "%s"...' % xcompose_file)
                try:
                    f = open(xcompose_file, 'a')
                    f.write('\n# Touchcursor compose rules\n')
                    f.write('include "%s"\n' % tc_xcompose_file)
                    f.close()
                except Exception as e:
                    show_error_and_exit('Unable to append to "%s": %s' % (xcompose_file, str(e)))
        except Exception as e:
            show_error_and_exit('Unable to read XCompose file "%s": %s' % (xcompose_file, str(e)))
    else:
        # Create XCompose file
        print('')
        xcompose_dir = os.path.dirname(os.path.abspath(xcompose_file))
        if not os.access(xcompose_dir, os.W_OK):
            show_error_and_exit('XCompose file can not be written to "%s"' % xcompose_dir)

        try:
            f = open(xcompose_file, 'w')
        except Exception as e:
            show_error_and_exit('Unable to create "%s": %s' % (xcompose_file, str(e)))
        print('Creating "%s"...' % xcompose_file)
        f.write('# Created by `%s --regen`\n\n' % os.path.basename(sys.argv[0]))
        f.write('# Multi key compose rules for locale\n')
        f.write('include "%L"\n\n')
        f.write('# Touchcursor compose rules\n')
        f.write('include "%s"\n' % tc_xcompose_file)
        f.close()

    print('')
    print('Programs MUST be restarted for XCompose changes to take effect.')
    print('')
    print('If compose input method does not work in GTK and QT, add the following lines to your profile:')
    print('  # This disables the ctrl-shift-U input method in GTK programs')
    print('  export GTK_IM_MODULE="xim"')
    print('  export QT_IM_MODULE="xim"')
    print('')
    print('All users need their own .XCompose file in order for the compose input method to work in their programs.')
